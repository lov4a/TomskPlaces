// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TomskPlaces.Infrastructure.Persistence;

#nullable disable

namespace TomskPlaces.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250721202450_AddNews")]
    partial class AddNews
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TomskPlaces.Domain.Entities.CategoryDish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ImageId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<string>("Remark")
                        .HasColumnType("text");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ImageId");

                    b.ToTable("CategoryDish");
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.Compilation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ImageId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("Compilations");
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.CompilationPlace", b =>
                {
                    b.Property<int>("PlaceId")
                        .HasColumnType("integer");

                    b.Property<int>("CompilationId")
                        .HasColumnType("integer");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("integer");

                    b.HasKey("PlaceId", "CompilationId");

                    b.HasIndex("CompilationId");

                    b.ToTable("CompilationPlace");
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.MenuCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CateringId")
                        .HasColumnType("integer");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CateringId");

                    b.ToTable("MenuCategories");
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.Network", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ImageId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("Networks");
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsBanner")
                        .HasColumnType("boolean");

                    b.Property<string>("Link")
                        .HasColumnType("text");

                    b.Property<int>("MainImageId")
                        .HasColumnType("integer");

                    b.Property<int?>("MobileImageId")
                        .HasColumnType("integer");

                    b.Property<int?>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("Preview")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MainImageId");

                    b.HasIndex("MobileImageId");

                    b.ToTable("Newses");
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Mark")
                        .HasColumnType("double precision");

                    b.Property<double>("MinimumAge")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Site")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Places", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.PlaceImage", b =>
                {
                    b.Property<int>("PlaceId")
                        .HasColumnType("integer");

                    b.Property<int>("ImageId")
                        .HasColumnType("integer");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("integer");

                    b.HasKey("PlaceId", "ImageId");

                    b.HasIndex("ImageId");

                    b.ToTable("PlaceImages");
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.PlaceNetwork", b =>
                {
                    b.Property<int>("PlaceId")
                        .HasColumnType("integer");

                    b.Property<int>("NetworkId")
                        .HasColumnType("integer");

                    b.HasKey("PlaceId", "NetworkId");

                    b.HasIndex("NetworkId");

                    b.ToTable("PlaceNetworks");
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.PlaceOwner", b =>
                {
                    b.Property<int>("PlaceId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("PlaceId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("PlaceOwners");
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.PlacePhoneNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Discription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PlaceId")
                        .HasColumnType("integer");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("PhoneNumbers");
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.PlaceType", b =>
                {
                    b.Property<int>("PlaceId")
                        .HasColumnType("integer");

                    b.Property<int>("TypeOfPlaceId")
                        .HasColumnType("integer");

                    b.HasKey("PlaceId", "TypeOfPlaceId");

                    b.HasIndex("TypeOfPlaceId");

                    b.ToTable("PlaceTypes");
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Mark")
                        .HasColumnType("double precision");

                    b.Property<int>("PlaceId")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.ReviewImage", b =>
                {
                    b.Property<int>("ReviewId")
                        .HasColumnType("integer");

                    b.Property<int>("ImageId")
                        .HasColumnType("integer");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("integer");

                    b.HasKey("ReviewId", "ImageId");

                    b.HasIndex("ImageId");

                    b.ToTable("ReviewImages");
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.Route", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Distance")
                        .HasColumnType("double precision");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<int>("ImageId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<char>("Transport")
                        .HasColumnType("character(1)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("Route");
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.RoutePlace", b =>
                {
                    b.Property<int>("PlaceId")
                        .HasColumnType("integer");

                    b.Property<int>("RouteId")
                        .HasColumnType("integer");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("integer");

                    b.HasKey("PlaceId", "RouteId");

                    b.HasIndex("RouteId");

                    b.ToTable("RoutePlace");
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.TypeOfPlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Discription")
                        .HasColumnType("text");

                    b.Property<int>("ImageId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<char>("Type")
                        .HasColumnType("character(1)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("ImageId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.WorkSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<TimeOnly>("CloseTime")
                        .HasColumnType("time without time zone");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("boolean");

                    b.Property<TimeOnly>("OpenTime")
                        .HasColumnType("time without time zone");

                    b.Property<int>("PlaceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("WorkSchedules");
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.Catering", b =>
                {
                    b.HasBaseType("TomskPlaces.Domain.Entities.Place");

                    b.Property<string>("Cuisine")
                        .HasColumnType("text");

                    b.Property<bool>("HasTerrace")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasVegan")
                        .HasColumnType("boolean");

                    b.Property<int?>("Music")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.ToTable("Caterings", (string)null);
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.Entertainments", b =>
                {
                    b.HasBaseType("TomskPlaces.Domain.Entities.Place");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<int>("MaxNumberOfpeople")
                        .HasColumnType("integer");

                    b.Property<int>("MinNumberOfpeople")
                        .HasColumnType("integer");

                    b.ToTable("Entertainments", (string)null);
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.Event", b =>
                {
                    b.HasBaseType("TomskPlaces.Domain.Entities.Place");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("NumberOfPeop")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.ToTable("Events", (string)null);
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.Sport", b =>
                {
                    b.HasBaseType("TomskPlaces.Domain.Entities.Place");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<int>("MaxNumberOfpeople")
                        .HasColumnType("integer");

                    b.Property<int>("MinNumberOfpeople")
                        .HasColumnType("integer");

                    b.ToTable("Sports", (string)null);
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.WalkPlace", b =>
                {
                    b.HasBaseType("TomskPlaces.Domain.Entities.Place");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.ToTable("WalkPlaces", (string)null);
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.CategoryDish", b =>
                {
                    b.HasOne("TomskPlaces.Domain.Entities.MenuCategory", "MenuCategory")
                        .WithMany("Dishes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TomskPlaces.Domain.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.Navigation("Image");

                    b.Navigation("MenuCategory");
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.Compilation", b =>
                {
                    b.HasOne("TomskPlaces.Domain.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.CompilationPlace", b =>
                {
                    b.HasOne("TomskPlaces.Domain.Entities.Compilation", "Compilation")
                        .WithMany("Places")
                        .HasForeignKey("CompilationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TomskPlaces.Domain.Entities.Place", "Place")
                        .WithMany("Compilations")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Compilation");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.MenuCategory", b =>
                {
                    b.HasOne("TomskPlaces.Domain.Entities.Catering", "Catering")
                        .WithMany("Categories")
                        .HasForeignKey("CateringId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Catering");
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.Network", b =>
                {
                    b.HasOne("TomskPlaces.Domain.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.News", b =>
                {
                    b.HasOne("TomskPlaces.Domain.Entities.Image", "MainImage")
                        .WithMany()
                        .HasForeignKey("MainImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TomskPlaces.Domain.Entities.Image", "MobileImage")
                        .WithMany()
                        .HasForeignKey("MobileImageId");

                    b.Navigation("MainImage");

                    b.Navigation("MobileImage");
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.PlaceImage", b =>
                {
                    b.HasOne("TomskPlaces.Domain.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TomskPlaces.Domain.Entities.Place", "Place")
                        .WithMany("Images")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.PlaceNetwork", b =>
                {
                    b.HasOne("TomskPlaces.Domain.Entities.Network", "Network")
                        .WithMany("Places")
                        .HasForeignKey("NetworkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TomskPlaces.Domain.Entities.Place", "Place")
                        .WithMany("Networks")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Network");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.PlaceOwner", b =>
                {
                    b.HasOne("TomskPlaces.Domain.Entities.Place", "Place")
                        .WithMany("PlaceOwners")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TomskPlaces.Domain.Entities.User", "User")
                        .WithMany("PlaceOwned")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.PlacePhoneNumber", b =>
                {
                    b.HasOne("TomskPlaces.Domain.Entities.Place", "Place")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.PlaceType", b =>
                {
                    b.HasOne("TomskPlaces.Domain.Entities.Place", "Place")
                        .WithMany("Types")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TomskPlaces.Domain.Entities.TypeOfPlace", "TypeOfPlace")
                        .WithMany("Places")
                        .HasForeignKey("TypeOfPlaceId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Place");

                    b.Navigation("TypeOfPlace");
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.Review", b =>
                {
                    b.HasOne("TomskPlaces.Domain.Entities.Place", "Place")
                        .WithMany("Reviews")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TomskPlaces.Domain.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Place");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.ReviewImage", b =>
                {
                    b.HasOne("TomskPlaces.Domain.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TomskPlaces.Domain.Entities.Review", "Review")
                        .WithMany("Images")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.Route", b =>
                {
                    b.HasOne("TomskPlaces.Domain.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.RoutePlace", b =>
                {
                    b.HasOne("TomskPlaces.Domain.Entities.Place", "Place")
                        .WithMany("Routes")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TomskPlaces.Domain.Entities.Route", "Route")
                        .WithMany("Places")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.TypeOfPlace", b =>
                {
                    b.HasOne("TomskPlaces.Domain.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.User", b =>
                {
                    b.HasOne("TomskPlaces.Domain.Entities.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.WorkSchedule", b =>
                {
                    b.HasOne("TomskPlaces.Domain.Entities.Place", "Place")
                        .WithMany("Schedules")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.Catering", b =>
                {
                    b.HasOne("TomskPlaces.Domain.Entities.Place", null)
                        .WithOne()
                        .HasForeignKey("TomskPlaces.Domain.Entities.Catering", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.Entertainments", b =>
                {
                    b.HasOne("TomskPlaces.Domain.Entities.Place", null)
                        .WithOne()
                        .HasForeignKey("TomskPlaces.Domain.Entities.Entertainments", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.Event", b =>
                {
                    b.HasOne("TomskPlaces.Domain.Entities.Place", null)
                        .WithOne()
                        .HasForeignKey("TomskPlaces.Domain.Entities.Event", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.Sport", b =>
                {
                    b.HasOne("TomskPlaces.Domain.Entities.Place", null)
                        .WithOne()
                        .HasForeignKey("TomskPlaces.Domain.Entities.Sport", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.WalkPlace", b =>
                {
                    b.HasOne("TomskPlaces.Domain.Entities.Place", null)
                        .WithOne()
                        .HasForeignKey("TomskPlaces.Domain.Entities.WalkPlace", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.Compilation", b =>
                {
                    b.Navigation("Places");
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.MenuCategory", b =>
                {
                    b.Navigation("Dishes");
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.Network", b =>
                {
                    b.Navigation("Places");
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.Place", b =>
                {
                    b.Navigation("Compilations");

                    b.Navigation("Images");

                    b.Navigation("Networks");

                    b.Navigation("PhoneNumbers");

                    b.Navigation("PlaceOwners");

                    b.Navigation("Reviews");

                    b.Navigation("Routes");

                    b.Navigation("Schedules");

                    b.Navigation("Types");
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.Review", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.Route", b =>
                {
                    b.Navigation("Places");
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.TypeOfPlace", b =>
                {
                    b.Navigation("Places");
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.User", b =>
                {
                    b.Navigation("PlaceOwned");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("TomskPlaces.Domain.Entities.Catering", b =>
                {
                    b.Navigation("Categories");
                });
#pragma warning restore 612, 618
        }
    }
}
